# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных
# значений необходимо запускать скрипт с параметрами.

from sys import argv

script_name, hours, rate, bonus = argv

print(f'Salary: {int(hours) * int(rate) + int(bonus)}')

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего
# элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

input_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
output_list = [input_list[i] for i in range(1, len(input_list)) if input_list[i] > input_list[i-1]]

print(output_list)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

print([i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0])

# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел,
# соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания
# обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

input_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

result = [i for i in input_list if input_list.count(i) == 1]
print(result)


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные
# числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

my_list = [i for i in range(100, 1001, 2)]
print(f'Исходный список: {my_list}')
result = reduce(lambda x, y: x*y, my_list)
print(f'Результат произведения всех элементов списка = {result}')


# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен
# быть бесконечным. Предусмотрите условие его завершения.
# #### Например, в первом задании выводим целые числа,
# начиная с 3. При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором
# повторение элементов списка прекратится.

from itertools import count, cycle

first = input('Введите первое число списка: ')
counter = count(int(first))
print(f'Первые 10 целых чисел, начиная с {first} это: {[next(counter) for i in range(10)]}')

input_list = [1, 2, 3]
print(f'Исходный список: {input_list}')

cycler = cycle(input_list)
print(f'Пройдемся по элементам списка 10 раз: ')
for i in range(10):
    print(next(cycler))


# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from math import factorial


def fact(n):
    for i in range(1, n):
        yield factorial(i)


for el in fact(10):
    print(el)
