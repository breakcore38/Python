# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать у
# пользователя, предусмотреть обработку ситуации деления на ноль.

def my_del(arg_1, arg_2):
    try:
        return arg_1 / arg_2
    except ZeroDivisionError:
        return


result = my_del(20, 5)
print(result) if result else print("Деление на ноль")


# 2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя: имя, фамилия,
# год рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы.
# Осуществить вывод данных о пользователе одной строкой.

def my_person(name, surname, year_of_birth, city, email, tel):
    return f'{name} {surname}, {year_of_birth} года рождения. Родился в городе {city}. E-mail: {email}, телефон: {tel}'


print(my_person(name='Вася', surname='Пупкин', year_of_birth='1992',
                city='Санкт-Петербург', email='Vasya1992@gmail.com', tel='+7(999)999-99-99'))


# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента и возвращает сумму наибольших двух
# аргументов.

def my_func(arg_1, arg_2, arg_3):
    my_args = list([arg_1, arg_2, arg_3])
    my_args.sort()
    return my_args[1] + my_args[2]


print(my_func(5, 3, 3))


# 4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Выполните возведение числа x в степень y. Задание реализуйте в виде функции my_func(x, y). При решении задания нужно
# обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **.
# Второй — более сложная реализация без оператора **, предусматривающая использование цикла.


# Саша, я добавил исключение TypeError когда тестировал проверку на "действительное положительное число x" со строками
# и списками на всякий случай, но вообще в таких задачах это наверное лишнее же
# потому что входные данные должны удвлетворять заданию, правильно?

def my_func_1(x, y):
    try:
        if x < 0 or y > 0 or type(y) != int:
            return
        return x ** y
    except TypeError:
        return


def my_func_2(x, y):
    try:
        if x < 0 or y > 0 or type(y) != int:
            return
        func_result = x
        for i in range(1, abs(y)):
            func_result *= x
        return 1 / func_result
    except TypeError:
        return


result = my_func_1(2, -3)
print(result) if result else print("Invalid variable")

result = my_func_2(2, -3)
print(result) if result else print("Invalid variable")

# 5. Программа запрашивает у пользователя строку чисел, разделённых пробелом. При нажатии Enter должна выводиться
# сумма чисел. Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter. Сумма вновь
# введённых чисел будет добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы завершается.
# Если специальный символ введён после нескольких чисел, то вначале нужно добавить сумму этих чисел
# к полученной ранее сумме и после этого завершить программу.

result = 0
while True:
    try:
        input_string = input('Введите строку чисел, разделённых пробелом. Чтобы завершить введите символ: ')
        numbers = list(input_string.split())
        true_numbers = []
        for number in numbers:
            if int(number):
                true_numbers.append(int(number))
    except ValueError:
        result += (lambda *args: sum(*args))(true_numbers)
        break
    result += (lambda *args: sum(*args))(true_numbers)
    print(result)
print(f'Окончательный результат: {result}')

# 6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же,
# но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.

print((lambda word: word[0].upper() + word[1::])(input('Введите слово маленькими латинскими буквами: ')))


# 7. Продолжить работу над заданием. В программу должна попадать строка из слов, разделённых пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре. Нужно сделать вывод исходной строки, но
# каждое слово должно начинаться с заглавной буквы. Используйте написанную ранее функцию int_func().

input_string = input('Введите строку из слов маленькими латинскими буквами, разделенных пробелом: ').split()
new_string = ''
for word in input_string:
    word = (lambda word1: word1[0].upper() + word1[1::])(word)
    new_string += word + ' '
print(new_string)
